void ChartToExpression::mul(vector<int> &a, const vector<int> &b) {
	vector<int> v;
	for (int i = 0; i < a.size(); i++)
		for (int j = 0; j < b.size(); j++)
			v.push_back(a[i] | b[j]);
	sort(v.begin(), v.end());
	v.erase(unique(v.begin(), v.end()), v.end());
	for (int i = 0; i < v.size() - 1; i++)
		for (int j = v.size() - 1; j > i; --j) {
			int z = v[i] & v[j];
			if ((z & v[i]) == v[i])
				v.erase(v.begin() + j);
			else if ((z & v[j]) == v[j]) {
				size_t t = v[i];
				v[i] = v[j];
				v[j] = t;
				v.erase(v.begin() + j);
				j = v.size();
			}
		}
	a = v;
}

void ChartToExpression::Simplify() {
	//petrick
	M0.clear();
	for (int i = 0; i < (int)primes.size(); i++)
		if (table[i][0])
			M0.push_back(1 << i);
	for (int k = 1; k < (int)MinTerm.size(); k++) {
		M1.clear();
		for (int i = 0; i < (int)primes.size(); i++)
			if (table[i][k])
				M1.push_back(1 << i);
		mul(M0, M1);
	}
}
